{
  "name": "steno",
  "version": "0.4.4",
  "description": "Simple file writer with race condition prevention and atomic writing",
  "main": "index.js",
  "scripts": {
    "test": "node test | tap-dot && standard",
    "prepush": "npm test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/typicode/steno.git"
  },
  "keywords": [
    "fs",
    "file",
    "write",
    "writer",
    "asynchronous",
    "race",
    "condition",
    "atomic",
    "writing",
    "safe"
  ],
  "author": {
    "name": "typicode"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/typicode/steno/issues"
  },
  "homepage": "https://github.com/typicode/steno",
  "devDependencies": {
    "after": "^0.8.1",
    "husky": "^0.11.1",
    "standard": "^6.0.7",
    "tap-dot": "^0.2.3",
    "tape": "^3.0.1"
  },
  "dependencies": {
    "graceful-fs": "^4.1.3"
  },
  "readme": "# steno [![](http://img.shields.io/npm/dm/steno.svg?style=flat)](https://www.npmjs.org/package/steno)  [![](https://travis-ci.org/typicode/steno.svg?branch=master)](https://travis-ci.org/typicode/steno)\n\n> Simple file writer with __atomic writing__ and __race condition prevention__.\n\nCan be used as a drop-in replacement to `fs.writeFile()`.\n\nBuilt on [graceful-fs](https://github.com/isaacs/node-graceful-fs) and used in [lowdb](https://github.com/typicode/lowdb).\n\n## Install\n\n```\nnpm install steno --save\n```\n\n## Usage\n\n```javascript\nconst steno = require('steno')\n\nsteno.writeFile('file.json', data, err => {\n  if (err) throw err\n})\n```\n\n## The problem it solves\n\n### Without steno\n\nLet's say you have a server and want to save data to disk:\n\n```javascript\nvar data = { counter: 0 }\n\nserver.post('/', (req, res) => {\n  // Increment counter\n  ++data.counter\n\n  // Save data asynchronously\n  fs.writeFile('data.json', JSON.stringify(data), err => {\n    if (err) throw err\n    res.end()\n  })\n})\n```\n\nNow if you have many requests, for example `1000`, there's a risk that you end up with:\n\n```javascript\n// In your server\ndata.counter === 1000\n\n// In data.json\ndata.counter === 865 // ... or any other value\n```\n\nWhy? Because, `fs.write` doesn't guarantee that the call order will be kept. Also, if the server is killed while `data.json` is being written, the file can get corrupted.\n\n### With steno\n\n```javascript\nserver.post('/increment', (req, res) => {\n  ++data.counter\n\n  steno.writeFile('data.json', JSON.stringify(data), err => {\n    if (err) throw err\n    res.end()\n  })\n})\n```\n\nWith steno you'll always have the same data in your server and file. And in case of a crash, file integrity will be preserved.\n\nif needed, you can also use `steno.writeFileSync()` which offers atomic writing too.\n\n__Important: works only in a single instance of Node.__\n\n## License\n\nMIT - [Typicode](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "_id": "steno@0.4.4",
  "dist": {
    "shasum": "8d535244abb2d937d8918b4d3dea835fa5e69c4b"
  },
  "_from": "steno@^0.4.1",
  "_resolved": "https://registry.npmjs.org/steno/-/steno-0.4.4.tgz"
}
